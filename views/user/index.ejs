<!DOCTYPE html>
<html>

<head>
    <title>GIS Map</title>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="keywords" content="gis, sig">
    <meta name="author" content="DeniSetiawan">
    <meta name="robots" content="index, follow">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description"
        content="Sistem Informasi Geografis Pemetaan Fasilitas dan Layanan Publik Berbasis Web Pada Kecamatan Manggelewa">
    <meta property="og:title"
        content="Sistem Informasi Geografis Pemetaan Fasilitas dan Layanan Publik Berbasis Web Pada Kecamatan Manggelewa">
    <meta property="og:description"
        content="Sistem Informasi Geografis Pemetaan Fasilitas dan Layanan Publik Berbasis Web Pada Kecamatan Manggelewa">
    <meta property="og:image" content="https://telegra.ph/file/05153448df2c81f607435.png">
    <link rel="shortcut icon" href="favicon.ico" type="image/x-icon">
    <meta name="format-detection" content="telephone=no">
    <base href="/">
    <!-- Link to Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">
    <style>
        html,
        body {
            font-family: 'Cairo', sans-serif;
            height: 100%;
            margin: 0;
            padding: 0;
            width: 100%;
            background-color: #f4f4f4;
            /* Background color for the page */
        }

        /* Map container */
        #map {
            height: 100%;
            width: 100%;
        }

        /* Search container */
        #search-container {
            position: absolute;
            top: 10px;
            left: 50%;
            transform: translateX(-50%);
            z-index: 5;
            display: flex;
            align-items: center;
            width: 90%;
            max-width: 600px;
            background: white;
            padding: 5px 10px;
            border-radius: 20px;
            /* Updated border-radius for rounded corners */
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        }

        /* Search input */
        #search-input {
            flex-grow: 1;
            border: none;
            padding: 10px;
            font-size: 16px;
            border-radius: 20px;
            /* Updated border-radius for rounded corners */
            outline: none;
            /* Remove outline on focus */
            margin-right: 10px;
            /* Add some margin to the right */
            box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
            /* Add subtle inner shadow */
            min-width: 0;
            /* Ensure the input doesn't shrink less than its content */
            max-width: 100%;
            /* Ensure the input doesn't exceed its container's width */
            box-sizing: border-box;
            /* Include padding and border in the element's total width and height */
        }

        /* Search button */
        #search-button {
            font-size: 20px;
            cursor: pointer;
            color: #555;
            /* Color of the search icon */
            transition: color 0.3s ease;
            /* Smooth color transition */
            background: #f1f1f1;
            /* Light background color for button */
            border-radius: 50%;
            /* Make the button circular */
            padding: 10px;
            /* Add padding for better click area */
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
            /* Add subtle shadow */
        }

        /* Hover effect for search button */
        #search-button:hover {
            color: #333;
            /* Darker color on hover */
            background: #e0e0e0;
            /* Slightly darker background on hover */
        }

        /* Search results container */
        #search-results {
            position: absolute;
            top: 60px;
            left: 50%;
            transform: translateX(-50%);
            width: 90%;
            max-width: 600px;
            max-height: 300px;
            overflow-y: auto;
            background: white;

            border-radius: 15px;
            /* Updated border-radius for rounded corners */
            display: none;
            z-index: 15;
        }

        /* Search result items */
        .search-result-item {
            cursor: pointer;
            padding: 10px;
            border-bottom: 1px solid #ddd;
            transition: background-color 0.3s ease;
            /* Smooth background color transition */
            border-radius: 15px;
            /* Updated border-radius for rounded corners */
            margin: 5px;
            /* Add some margin */
        }

        /* Hover effect for search result items */
        .search-result-item:hover {
            background-color: #f0f0f0;
            /* Background color on hover */
        }

        /* Hamburger menu icon */
        #hamburger-menu {
            font-size: 24px;
            /* Sedikit lebih besar */
            margin-right: 15px;
            /* Tambahkan sedikit margin */
            cursor: pointer;
            color: #555;
            /* Warna ikon hamburger */
            transition: color 0.3s ease, transform 0.3s ease;
            /* Transisi warna dan transformasi */

            border-radius: 50%;
            /* Membuat ikon menjadi bulat */
            padding: 10px;
            /* Tambahkan padding untuk area klik yang lebih besar */

        }

        /* Hover effect for hamburger menu icon */
        #hamburger-menu:hover {
            color: #333;
            /* Warna lebih gelap saat hover */

            transform: scale(1.1);
            /* Sedikit perbesar ikon saat hover */
        }


        /* Dropdown menu */
        #dropdown-menu {
            position: absolute;
            top: 60px;
            left: 0;
            background: white;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            /* Mengubah bayangan menjadi lebih halus */
            border-radius: 8px;
            /* Membuat sudut lebih bulat */
            display: none;
            z-index: 10;
            min-width: 150px;
            /* Menambah lebar minimum */
        }

        /* Show dropdown menu */
        #dropdown-menu.show {
            display: block;
        }

        /* Dropdown items */
        .dropdown-item {
            cursor: pointer;
            padding: 12px 15px;
            /* Menambah padding untuk lebih banyak ruang */
            border-bottom: 1px solid #e0e0e0;
            /* Warna border lebih lembut */
            text-align: center;
            transition: background-color 0.3s ease, color 0.3s ease;
            /* Menambah transisi warna */
        }

        /* Hover effect for dropdown items */
        .dropdown-item:hover {
            background-color: #f9f9f9;
            /* Warna latar belakang lebih lembut saat hover */
            color: #f8a961;
            /* Warna teks berubah saat hover */
            border-radius: 8px;
            /* Membuat sudut lebih bulat */
        }

        /* Map type dropdown */
        .map-type-dropdown {
            position: absolute;
            top: 60px;
            left: 155px;
            background: white;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            /* Mengubah bayangan menjadi lebih halus */
            border-radius: 8px;
            /* Membuat sudut lebih bulat */
            display: none;
            z-index: 20;
            min-width: 150px;
            /* Menambah lebar minimum */
        }

        /* Show map type dropdown */
        .map-type-dropdown.show {
            display: block;
        }

        /* Map type options */
        .map-type-option {
            cursor: pointer;
            padding: 12px 15px;
            /* Menambah padding untuk lebih banyak ruang */
            border-bottom: 1px solid #e0e0e0;
            /* Warna border lebih lembut */
            text-align: center;
            transition: background-color 0.3s ease, color 0.3s ease;
            /* Menambah transisi warna */
        }

        /* Last map type option without bottom border */
        .map-type-option:last-child {
            border-bottom: none;
        }

        /* Hover effect for map type options */
        .map-type-dropdown .map-type-option:hover {
            border-radius: 8px;
            background-color: #f9f9f9;
            /* Warna latar belakang lebih lembut saat hover */
            color: #f8a961;
            /* Warna teks berubah saat hover */
        }

        #dropdown-menu a:hover {
            background-color: #f9f9f9;
            /* Warna latar belakang lebih lembut saat hover */
            color: #f8a961;
            /* Warna teks berubah saat hover */
            border-radius: 8px;
            /* Membuat sudut lebih bulat */
        }

        /* Styling untuk ikon pada dropdown menu */
        #dropdown-menu a {
            display: flex;
            align-items: center;
            text-decoration: none;
            /* Menghapus garis bawah */
            color: #333;
            /* Warna teks yang diinginkan */
            padding: 1px 10px;
            /* Tambahkan padding untuk lebih banyak ruang */
        }

        #dropdown-menu a i {
            margin-right: 10px;
            /* Jarak antara ikon dan teks */
        }

        /* Styling untuk ikon pada dropdown map type */
        .map-type-dropdown .map-type-option {
            display: flex;
            align-items: center;
            text-decoration: none;
            /* Menghapus garis bawah */
            color: #333;
            /* Warna teks yang diinginkan */
            padding: 10px 15px;
            /* Tambahkan padding untuk lebih banyak ruang */
        }

        .map-type-dropdown .map-type-option i {
            margin-right: 10px;
            /* Jarak antara ikon dan teks */
        }

        /* Styling untuk tautan pada dropdown map type */
        .map-type-dropdown a {
            text-decoration: none;
            /* Menghapus garis bawah */
            color: #333;
            /* Warna teks yang diinginkan */
            padding: 10px 15px;
            /* Tambahkan padding untuk lebih banyak ruang */
        }

        .facility-container {
            font-family: 'Cairo', sans-serif;
            width: 100%;
            max-width: 250px;
            margin: 0 auto;
            padding: 10px;
            background-color: #fff;
            border-radius: 8px;
            text-align: left;
        }

        .facility-container h3 {
            margin-top: 0;
            font-size: 1.5em;
        }

        .facility-container p {
            margin: 5px 0;
            font-size: 1em;
        }

        .facility-details {
            margin: 5px 0;
            font-size: 1em;
        }

        .facility-button {
            background-color: #f8a961;
            border: none;
            color: white;
            padding: 5px 10px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 14px;
            margin: 2px 2px;
            cursor: pointer;
            border-radius: 4px;
            transition: background-color 0.3s;
        }

        .facility-button:hover {
            background-color: #e38d66;
        }

        .facility-foto {
        max-width: 10rem !important;
        height: 10rem !important;
        display: block;
        margin: 0 auto; /* Untuk mengatur posisi gambar menjadi di tengah */
        margin-bottom: 10px; /* Atur jarak antara gambar dengan elemen di atasnya */
        }


        .route-link {
            margin: 10px 0;
            text-align: center;
        }

        .route-link a {
            background-color: #e72428;
            text-decoration: none;
            padding: 5px;
            border-radius: 4px;
            color: #fff;
            font-size: 14px;
            display: inline-flex;
            align-items: center;
        }

        .route-link a:hover {
            background-color: #fff;
            color: #cc2b2e;
        }

        .route-link a i {
            margin-right: 5px;
            font-size: 16px;
        }

        .route-link a strong {
            font-weight: bold;
            margin-left: 5px;
        }

        .detail-button {
            background-color: #30578c;
            color: white;
            border: none;
            padding: 5px;
            cursor: pointer;
            margin-top: 10px;
            border-radius: 4px;
            font-size: 14px;
           
            transition: background-color 0.3s;
        }

        .detail-button:hover {
            background-color: #30578c;
        }
        

        #legend-toggle {
            position: absolute;
            bottom: 20px;
            right: 20px;
            background: #ffffff;
            padding: 10px;
            border-radius: 10px;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
            font-size: 14px;
            z-index: 5;
            transition: opacity 0.3s ease;
        }

        #legend-toggle h4 {
            margin-top: 0;
            margin-bottom: 10px;
            font-size: 16px;
            color: #333;
        }

        #legend-toggle div {
            display: flex;
            align-items: center;
            margin-bottom: 5px;
            font-size: 14px;
        }

        #legend-toggle div img {
            width: 20px;
            height: 20px;
            margin-right: 10px;
        }

        #legend-toggle.hidden {
            display: none;
        }

        #legend-toggle button {
            position: absolute;
            top: 5px;
            right: 5px;
            background: none;
            border: none;
            cursor: pointer;
            color: #888;
            font-size: 16px;
        }

        #legend-toggle button:hover {
            color: #555;
        }

        #legend-info-icon {
            position: absolute;
            bottom: 30px;
            right: 20px;
            background: #852d42;
            color: #ffcd69;
            border: none;
            padding: 10px;
            border-radius: 50%;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
            font-size: 20px;
            cursor: pointer;
            z-index: 10;
            transition: background-color 0.3s ease;
        }

        #legend-info-icon.hidden {
            display: none;
        }

        #legend-info-icon:hover {
            background-color: #fb5968;
        }
         

 #comments-section {
 margin-top: 20px;
 }

 #comments-list {
 max-height: 200px; /* Maksimum tinggi comments-list */
 overflow-y: auto; /* Scroll jika melebihi tinggi maksimum */
 margin-bottom: 10px;
 padding-right: 15px; /* Padding untuk scroll bar */
 }

 .comment-item {
 margin-bottom: 15px;
 padding: 10px;
 border: 1px solid #ddd;
 border-radius: 5px;
 background-color: #f9f9f9;
 }

 .comment-item .comment-header {
 display: flex;
 align-items: center;
 margin-bottom: 5px;
 }

 .comment-item .comment-header i {
 margin-right: 5px;
 color: #888;
 }

 .comment-item .comment-author {
 margin: 0;
 font-weight: bold;
 }

 .comment-item .comment-content {
 margin: 5px 0;
 text-align: left;
 }
 #comment-form {
 margin-top: 20px;
 display: flex;
 flex-direction: column;
 }

 #comment-input {
 padding: 10px;
 margin-bottom: 10px;
 resize: vertical;
 border: 1px solid #ddd;
 border-radius: 5px;
 font-size: 14px;
 }

 #comment-form button {
 padding: 10px;
 background-color: #007bff;
 color: white;
 border: none;
 cursor: pointer;
 border-radius: 5px;
 transition: background-color 0.3s;
 font-size: 14px;
 align-self: flex-end;
 width: 120px;
 text-align: center;
 }

 #comment-form button:hover {
 background-color: #0056b3;
 }


        /* Responsive adjustments */
        @media (max-width: 600px) {
            #search-container {
                width: 95%;
                /* Increase width to 95% on smaller screens */
                padding: 5px 5px;
                /* Reduce padding */
            }

            #search-button {
                font-size: 18px;
                /* Reduce icon size */
                margin-left: 5px;
                /* Reduce margin */
            }

            #search-results {
                width: 95%;
                /* Increase width to 95% on smaller screens */
            }

            .facility-container {
                width: 90%;
                max-width: none;
                padding: 5px;
            }

            .facility-button {
                font-size: 0.8em;
                padding: 4px 8px;
            }

            .route-link a {
                font-size: 0.9em;
                padding: 6px 12px;
            }

            #legend-toggle {
                bottom: 10px;
                right: 10px;
                padding: 10px;
                font-size: 12px;
            }

            #legend-toggle h4 {
                font-size: 14px;
            }

            #legend-toggle div img {
                width: 16px;
                height: 16px;
            }
        }
    </style>
</head>

<body>
    <div id="search-container">
        <i id="hamburger-menu" class="fas fa-bars"></i>
        <div id="dropdown-menu">
            <div class="dropdown-item" id="map-type">
                <i class="fas fa-map"></i> Map Type
            </div>
            <% if (user.role === 'Admin') { %>
            <div class="dropdown-item" id="admin-panel">
                <a href="/admin"><i class="fas fa-crown"></i> Admin</a>
            </div>
            <% } %>
            <div class="dropdown-item" id="logout">
                <a href="/logout"><i class="fas fa-sign-out-alt"></i> Logout</a>
            </div>
        </div>

        <div id="map-type-dropdown" class="map-type-dropdown">
            <div class="map-type-option" id="roadmap">
                <i class="fas fa-road"></i> Roadmap
            </div>
            <div class="map-type-option" id="satellite">
                <i class="fas fa-satellite"></i> Satellite
            </div>
            <div class="map-type-option" id="hybrid">
                <i class="fas fa-globe"></i> Hybrid
            </div>
            <div class="map-type-option" id="terrain">
                <i class="fas fa-mountain"></i> Terrain
            </div>
        </div>

        <input id="search-input" type="text" placeholder="Telusuri Peta....">
        <i id="search-button" class="fas fa-search"></i>
        <div id="search-results"></div>
    </div>
    <div id="map"></div>
    <div id="legend-toggle" class="legend">
        <h4 class="legend-title">Legenda</h4>
        <button onclick="toggleLegend()"><i class="fas fa-minus"></i></button>
    </div>
    <button onclick="toggleLegend()" id="legend-info-icon" class="hidden"><i class="fas fa-question fa-xl"></i></button>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD4P3rMVrMzwD_8l1I1ETldunN6Vdx7Tqk&callback=initMap&libraries=places&v=weekly"
        defer></script>
    <script>
        let map;
        let activeInfoWindow;
        let markers = [];
        const defaultLatLng = {
            lat: -8.532829,
            lng: 118.305939
        };

        function initMap() {
            map = new google.maps.Map(document.getElementById("map"), {
                zoom: 12,
                center: defaultLatLng,
                mapTypeId: 'roadmap',
                mapTypeControl: false,
                fullscreenControl: false,
                zoomControl: false,
                streetViewControl: true,
                streetViewControlOptions: {
                    position: google.maps.ControlPosition.LEFT_BOTTOM,
                },
            });

            fetchDataAndAddMarkers();

            document.getElementById('search-input').addEventListener('input', handleSearch);
            document.getElementById('search-button').addEventListener('click', clearSearch);

            const hamburgerMenu = document.getElementById('hamburger-menu');
            const dropdownMenu = document.getElementById('dropdown-menu');
            const mapTypeDropdown = document.getElementById('map-type-dropdown');

            hamburgerMenu.addEventListener('click', () => {
                dropdownMenu.classList.toggle('show');
                mapTypeDropdown.classList.remove('show'); // Hide map type dropdown when main dropdown is shown
            });

            document.addEventListener('click', (event) => {
                if (!event.target.closest('#dropdown-menu') && !event.target.closest('#hamburger-menu')) {
                    dropdownMenu.classList.remove('show');
                }
                if (!event.target.closest('.map-type-dropdown') && !event.target.closest('#map-type')) {
                    mapTypeDropdown.classList.remove('show');
                }
            });

            document.getElementById('map-type').addEventListener('click', () => {
                mapTypeDropdown.classList.toggle('show');
            });

            document.getElementById('roadmap').addEventListener('click', () => {
                map.setMapTypeId('roadmap');
                mapTypeDropdown.classList.remove('show');
            });

            document.getElementById('satellite').addEventListener('click', () => {
                map.setMapTypeId('satellite');
                mapTypeDropdown.classList.remove('show');
            });

            document.getElementById('hybrid').addEventListener('click', () => {
                map.setMapTypeId('hybrid');
                mapTypeDropdown.classList.remove('show');
            });

            document.getElementById('terrain').addEventListener('click', () => {
                map.setMapTypeId('terrain');
                mapTypeDropdown.classList.remove('show');
            });

            document.getElementById('logout').addEventListener('click', () => {
                dropdownMenu.classList.remove('show');
            });
        }

         function fetchDataAndAddMarkers() {
        // Fetch data for fasilitas
        fetch('/fasilitas')
            .then(response => response.json())
            .then(fasilitas => {
                fasilitas.forEach(fasilitas => {
                     const iconUrl = `/markers/${fasilitas.jenis_fasilita.marker}`;

                    addMarkers([fasilitas], fasilitas.jenis_fasilita.nama.toLowerCase(), iconUrl);
                });
            })
            .catch(error => console.error('Error fetching data:', error));
    }

    function addMarkers(fasilitasData, type, iconUrl) {
        fasilitasData.forEach(fasilitas => {
            if (fasilitas.latitude && fasilitas.longitude) {
                const lat = parseFloat(fasilitas.latitude);
                const lng = parseFloat(fasilitas.longitude);

                if (!isNaN(lat) && !isNaN(lng)) {
                    const icon = {
                        url: iconUrl,
                        scaledSize: new google.maps.Size(40, 40),
                        origin: new google.maps.Point(0, 0),
                        anchor: new google.maps.Point(20, 40),
                    };

                    const marker = new google.maps.Marker({
                        position: {
                            lat,
                            lng
                        },
                        map,
                        icon,
                        title: fasilitas.nama_fasilitas,
                        animation: google.maps.Animation.DROP,
                    });

                    const infoWindow = new google.maps.InfoWindow({
                        content: `
                        <div class="facility-container">
                            <img src="/fasilitas/${fasilitas.foto}" alt="${fasilitas.nama_fasilitas}"
                                class="facility-foto">
    <h3>${fasilitas.nama_fasilitas}</h3>
    <p><i class="fas fa-map-marker-alt"></i> Alamat: ${fasilitas.alamat || 'Tidak ada alamat'}</p>
    <div class="facility-details">
        <i class="fas fa-building"></i>
        Fasilitas:
        ${fasilitas.fasilitas ? fasilitas.fasilitas.split(',').map(fasilitasItem => 
        `<button class="facility-button">${fasilitasItem.trim()}</button>`).join(' ') : 'Tidak ada informasi fasilitas'}
    </div>
    <p><i class="fas fa-clock"></i> Jam Buka: ${fasilitas.jam_buka || 'Tidak ada informasi'}</p>
    <p><i class="fas fa-clock"></i> Jam Tutup: ${fasilitas.jam_tutup || 'Tidak ada informasi'}</p>
    <div class="route-link">
        <a href="https://www.google.com/maps/dir/?api=1&destination=${fasilitas.latitude},${fasilitas.longitude}" target="_blank">
            <i class="fas fa-route"></i> <strong>Rute</strong>
        </a>
        <button class="detail-button"
            onclick="showDetails('${fasilitas.nama_fasilitas}', '${fasilitas.id}')">
            <i class="fas fa-comment"></i> Komentar
        </button>
    </div>
    
</div>
`
                    });

                    marker.addListener('click', () => {
                        if (activeInfoWindow) {
                            activeInfoWindow.close();
                        }

                        infoWindow.open(map, marker);
                        activeInfoWindow = infoWindow;
                    });

                    markers.push({
                        marker,
                        fasilitas,
                        type
                    });
                } else {
                    console.error('Invalid latitude or longitude for:', fasilitas);
                }
            }
        });
    }

    function handleSearch(event) {
        const query = event.target.value.toLowerCase();
        const resultsContainer = document.getElementById('search-results');
        resultsContainer.innerHTML = '';

        if (query) {
            const results = markers.filter(({
                fasilitas
            }) => {
                return fasilitas.nama_fasilitas.toLowerCase().includes(query) || (fasilitas.alamat && fasilitas.alamat
                    .toLowerCase().includes(query));
            });

            results.forEach(({
                fasilitas,
                marker
            }) => {
                const item = document.createElement('div');
                item.classList.add('search-result-item');
                item.textContent = fasilitas.nama_fasilitas;
                item.addEventListener('click', () => {
                    // Update search input value with selected result
                    document.getElementById('search-input').value = fasilitas.nama_fasilitas;

                    // Clear search results and hide container
                    resultsContainer.style.display = 'none';

                    // Center map to selected marker
                    map.setCenter(marker.getPosition());
                    map.setZoom(15);

                    if (activeInfoWindow) {
                        activeInfoWindow.close();
                    }

                    const infoWindow = new google.maps.InfoWindow({
                        content: `
                             <div style="font-family: 'Cairo', sans-serif; width: 250px;">
                                 <img src="/fasilitas/${fasilitas.foto}" alt="${fasilitas.nama_fasilitas}"
                                     class="facility-foto">
                                 <h3 style="margin-top: 0;">${fasilitas.nama_fasilitas}</h3>
                                 <p style="margin: 5px 0;"><i class="fas fa-map-marker-alt"></i> Alamat:
                                     ${fasilitas.alamat || 'Tidak ada alamat'}</p>
                                 <div style="margin: 5px 0;">
                                     <i class="fas fa-building"></i>
                                     Fasilitas:
                                     ${fasilitas.fasilitas ? fasilitas.fasilitas.split(',').map(fasilitasItem =>
                                     `<button class="facility-button">${fasilitasItem.trim()}</button>`).join(' ') :
                                     'Tidak ada informasi fasilitas'}
                                 </div>
                                 <p style="margin: 5px 0;"><i class="fas fa-clock"></i> Jam Buka: ${fasilitas.jam_buka ||
                                     'Tidak ada informasi'}</p>
                                 <p style="margin: 5px 0;"><i class="fas fa-clock"></i> Jam Tutup: ${fasilitas.jam_tutup
                                     || 'Tidak ada informasi'}</p>

                                 <div class="route-link">
                                     <a href="https://www.google.com/maps/dir/?api=1&destination=${fasilitas.latitude},${fasilitas.longitude}"
                                         target="_blank">
                                         <i class="fas fa-route"></i> <strong>Rute</strong>
                                     </a>
                                     <button class="detail-button"
                                         onclick="showDetails('${fasilitas.nama_fasilitas}', '${fasilitas.id}')">
                                         <i class="fas fa-comment"></i> Komentar
                                     </button>
                                 </div>
 
                             </div>`
                    });

                    infoWindow.open(map, marker);
                    activeInfoWindow = infoWindow;
                });
                resultsContainer.appendChild(item);
            });

            resultsContainer.style.display = 'block';
        } else {
            resultsContainer.style.display = 'none';
        }
    }

        function clearSearch() {
            document.getElementById('search-input').value = '';
            document.getElementById('search-button').classList.replace('fa-times', 'fa-search');
            const resultsContainer = document.getElementById('search-results');
            resultsContainer.style.display = 'none';

            // Close all info windows
            if (activeInfoWindow) {
                activeInfoWindow.close();
            }

            // Reset map to default center and zoom
            map.setCenter(defaultLatLng);
            map.setZoom(12);
        }

        // Function to initialize legend visibility based on sessionStorage
        function initializeLegendVisibility() {
            const legend = document.getElementById('legend-toggle');
            const buttonShow = document.getElementById('legend-info-icon');

            // Check if there is a stored visibility state in sessionStorage
            const legendVisible = sessionStorage.getItem('legendVisible');

            // If no visibility state is stored or it's true, show the legend
            if (legendVisible === null || legendVisible === 'true') {
                legend.classList.remove('hidden');
                buttonShow.classList.add('hidden');
            } else {
                legend.classList.add('hidden');
                buttonShow.classList.remove('hidden');
            }
        }

        // Call the initialize function when the document is ready
        document.addEventListener('DOMContentLoaded', initializeLegendVisibility);

        // Function to toggle legend visibility and store state in sessionStorage
        function toggleLegend() {
            const legend = document.getElementById('legend-toggle');
            const buttonShow = document.getElementById('legend-info-icon');

            // Toggle visibility of legend and info button
            legend.classList.toggle('hidden');
            buttonShow.classList.toggle('hidden');

            // Store current visibility state in sessionStorage
            const legendVisible = !legend.classList.contains('hidden');
            sessionStorage.setItem('legendVisible', legendVisible.toString());
        }

        function showDetails(nama, idFasilitas) {
        const idUser = <%= user.id %>;
        let userIds = [];

        Swal.fire({
        title: `${nama}`,
        html: `
       

        <div id="comments-section">
            <h4>Komentar</h4>
            <div id="comments-list">
                <!-- Comments will be dynamically added here -->
            </div>

            <div id="comment-form">
                <textarea id="comment-input" placeholder="Tambahkan komentar..." rows="3"></textarea>
                <button onclick="addComment('${idUser}', '${idFasilitas}')">Tambah Komentar</button>
            </div>
        </div>
        `,
        showCloseButton: true,
        showConfirmButton: false,
        customClass: {
        container: 'swal-wide', // Adjust width if necessary
        },
        didOpen: async () => {
        try {
        // Fetch comments based on facility ID and tag
        const response = await fetch(`/reviews/fasilitas/${idFasilitas}`);
        const comments = await response.json();

        const commentsList = document.getElementById('comments-list');
        commentsList.innerHTML = ''; // Clear existing comments

        // Render fetched comments
        comments.forEach(comment => {
        userIds.push(comment.id_user);
        console.log(userIds);

        // Fetch user details based on userId
        fetch(`/users/${comment.id_user}`)
        .then(response => response.json())
        .then(user => {
        const newComment = document.createElement('div');
        newComment.classList.add('comment-item');
        newComment.innerHTML = `
        <div class="comment-header">
            <i class="fas fa-user-circle"></i>
            <p class="comment-author">${user.username || 'Nama Tidak Tersedia'}</p>
        </div>
        <p class="comment-content">${comment.komentar}</p>
        `;
        commentsList.appendChild(newComment);
        })
        .catch(error => {
        console.error('Failed to fetch user details:', error);
        });
        });
        } catch (error) {
        console.error('Failed to fetch comments:', error);
        }
        },
        });
        }


        async function addComment(idUser, idFasilitas) {
            const commentInput = document.getElementById('comment-input').value;
            if (commentInput.trim() === '') {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Komentar tidak boleh kosong!',
                });
                return;
            }

            try {
                // Simulate adding comment to backend
                const response = await fetch(`/reviews/fasilitas/${idFasilitas}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        komentar: commentInput,
                        id_fasilitas: idFasilitas,
                        id_user: idUser, // Assuming you have a way to identify the user
                    }),
                });

                if (!response.ok) {
                    throw new Error('Failed to add comment');
                }
                let nama
                if (idUser === <%= user.id %>) {
                    nama = user.username
                }
                // Add new comment to UI
                const commentsList = document.getElementById('comments-list');
                const newComment = document.createElement('div');
                newComment.classList.add('comment-item');
                newComment.innerHTML = `
<div class="comment-header">
    <i class="fas fa-user-circle"></i>
    <p class="comment-author">${nama}</p>
</div>
<p class="comment-content">${commentInput}</p>
`;
                commentsList.appendChild(newComment);

                // Clear the comment input field
                document.getElementById('comment-input').value = '';

                Swal.fire({
                    icon: 'success',
                    title: 'Komentar ditambahkan!',
                    showConfirmButton: false,
                    timer: 1500,
                });
            } catch (error) {
                console.error('Failed to add comment:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Gagal menambahkan komentar!',
                });
            }
        }

         document.addEventListener("DOMContentLoaded", function () {
         fetch('/jenisfasilitas')
         .then(response => response.json())
         .then(data => {
         const legendToggle = document.getElementById('legend-toggle');
         const legendTitle = legendToggle.querySelector('.legend-title'); // Select h4 with class 'legend-title'
         

         data.forEach(item => {
         const div = document.createElement('div');
         const img = document.createElement('img');
         img.src = `/markers/${item.marker}`;
         img.alt = item.nama;
         const text = document.createTextNode(` ${item.nama}`);
         div.appendChild(img);
         div.appendChild(text);
         legendTitle.appendChild(div);
         });

         // Insert legendContainer after legendTitle
         legendToggle.insertBefore(legendTitle, legendToggle.nextSibling);
         })
         .catch(error => console.error('Error fetching jenis fasilitas:', error));
         });


        window.initMap = initMap;
    </script>
</body>

</html>